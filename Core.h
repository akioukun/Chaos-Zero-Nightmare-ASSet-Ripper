#pragma once
#include <vector>
#include <string>
#include <cstdint>
#include <array>
#include <variant>

namespace Core {

    static constexpr std::array<uint8_t, 129> KEY = { {
        0x21, 0x0c, 0xed, 0x10, 0xd8, 0x81, 0xd7, 0xa3, 0xfa, 0x9b, 0xc9, 0x7a, 0xd3, 0xae, 0xeb, 0x6d,
        0x98, 0x89, 0x31, 0x34, 0x2d, 0x39, 0x1e, 0x1f, 0xe1, 0xc4, 0x7c, 0xdd, 0x2d, 0xef, 0x26, 0x37,
        0x7a, 0xfa, 0xbf, 0xd2, 0xd9, 0x60, 0x79, 0xf1, 0xca, 0x99, 0xd0, 0x32, 0xf7, 0xd8, 0x4d, 0x4e,
        0xf6, 0xce, 0x45, 0xda, 0x0c, 0x67, 0x99, 0x09, 0xe6, 0x89, 0x75, 0x69, 0x5f, 0xd9, 0x12, 0xa2,
        0x3e, 0x77, 0x74, 0x3c, 0xf5, 0xbe, 0x2e, 0x57, 0x64, 0x05, 0x1a, 0x71, 0x96, 0x62, 0x23, 0x25,
        0x80, 0x63, 0xfc, 0xe7, 0xc6, 0xd4, 0xe7, 0xca, 0x76, 0x7d, 0x70, 0x3c, 0xcb, 0xe2, 0x31, 0xc5,
        0xed, 0x03, 0x8d, 0xcc, 0xad, 0x1a, 0x75, 0x53, 0x4a, 0x61, 0x27, 0xb8, 0x30, 0xca, 0xeb, 0x73,
        0xb4, 0xc6, 0xd6, 0xdb, 0xda, 0x00, 0x88, 0xe2, 0x11, 0x21, 0xef, 0xd5, 0xf3, 0x8a, 0x02, 0x1f, 0x06
    } };

    struct FileNode;

    struct FileInfo {
        uint32_t offset;
        uint32_t size;
        std::string format;
    };

    struct FolderInfo {
        std::vector<FileNode> children;
    };

    struct FileNode {
        std::string name;
        std::string full_path;
        std::variant<FileInfo, FolderInfo> data;
    };

    inline void xor_buffer(uint8_t* buffer, size_t size, size_t file_offset) {
        for (size_t i = 0; i < size; ++i) {
            buffer[i] ^= KEY[(file_offset + i) % KEY.size()];
        }
    }
}
